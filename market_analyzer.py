import json
import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from openai import OpenAI
from config import Config
from logger_config import market_logger
import talib

class MarketAnalyzer:
    def __init__(self):
        # the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
        # do not change this unless explicitly requested by the user
        self.openai_client = OpenAI(api_key=Config.OPENAI_API_KEY)
        self.symbol_mapping = {
            'XAUUSD': 'GC=F',  # Gold futures
            'EURUSD': 'EURUSD=X',
            'GBPUSD': 'GBPUSD=X', 
            'USDJPY': 'USDJPY=X',
            'BTCUSD': 'BTC-USD'
        }
        
    def get_market_data(self, symbol: str, period: str = "1d", interval: str = "1h") -> pd.DataFrame:
        """ุงูุญุตูู ุนูู ุจูุงูุงุช ุงูุณูู ุงูุญููููุฉ"""
        try:
            yf_symbol = self.symbol_mapping.get(symbol, symbol)
            ticker = yf.Ticker(yf_symbol)
            
            # ุงูุญุตูู ุนูู ุงูุจูุงูุงุช ุงูุชุงุฑูุฎูุฉ
            data = ticker.history(period=period, interval=interval)
            
            if data.empty:
                market_logger.warning(f"ูุง ุชูุฌุฏ ุจูุงูุงุช ูู {symbol}")
                return pd.DataFrame()
            
            market_logger.info(f"ุชู ุงูุญุตูู ุนูู ุจูุงูุงุช {symbol}: {len(data)} ุณุฌู")
            return data
            
        except Exception as e:
            market_logger.error(f"ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุจูุงูุงุช {symbol}: {e}")
            return pd.DataFrame()
    
    def calculate_technical_indicators(self, data: pd.DataFrame) -> Dict[str, float]:
        """ุญุณุงุจ ุงููุคุดุฑุงุช ุงูุชูููุฉ"""
        if data.empty or len(data) < 20:
            return {}
        
        try:
            indicators = {}
            
            # ุฃุณุนุงุฑ ุงูุฅุบูุงู ูุงูุญุฌู
            close_prices = data['Close'].values
            high_prices = data['High'].values
            low_prices = data['Low'].values
            
            # ุงููุชูุณุทุงุช ุงููุชุญุฑูุฉ
            indicators['sma_20'] = talib.SMA(close_prices, timeperiod=20)[-1] if len(close_prices) >= 20 else 0
            indicators['ema_12'] = talib.EMA(close_prices, timeperiod=12)[-1] if len(close_prices) >= 12 else 0
            indicators['ema_26'] = talib.EMA(close_prices, timeperiod=26)[-1] if len(close_prices) >= 26 else 0
            
            # ูุคุดุฑ ุงูููุฉ ุงููุณุจูุฉ RSI
            rsi_values = talib.RSI(close_prices, timeperiod=14)
            indicators['rsi'] = rsi_values[-1] if len(rsi_values) > 0 and not np.isnan(rsi_values[-1]) else 50
            
            # ูุคุดุฑ MACD
            macd, macd_signal, macd_hist = talib.MACD(close_prices)
            indicators['macd'] = macd[-1] if len(macd) > 0 and not np.isnan(macd[-1]) else 0
            indicators['macd_signal'] = macd_signal[-1] if len(macd_signal) > 0 and not np.isnan(macd_signal[-1]) else 0
            
            # ุจููููุฌุฑ ุจุงูุฏุฒ
            bb_upper, bb_middle, bb_lower = talib.BBANDS(close_prices, timeperiod=20)
            indicators['bb_upper'] = bb_upper[-1] if len(bb_upper) > 0 and not np.isnan(bb_upper[-1]) else 0
            indicators['bb_lower'] = bb_lower[-1] if len(bb_lower) > 0 and not np.isnan(bb_lower[-1]) else 0
            
            # Stochastic
            stoch_k, stoch_d = talib.STOCH(high_prices, low_prices, close_prices)
            indicators['stoch_k'] = stoch_k[-1] if len(stoch_k) > 0 and not np.isnan(stoch_k[-1]) else 50
            indicators['stoch_d'] = stoch_d[-1] if len(stoch_d) > 0 and not np.isnan(stoch_d[-1]) else 50
            
            # ูุคุดุฑ ATR ููุชููุจุงุช
            atr_values = talib.ATR(high_prices, low_prices, close_prices, timeperiod=14)
            indicators['atr'] = atr_values[-1] if len(atr_values) > 0 and not np.isnan(atr_values[-1]) else 0
            
            # ุงูุณุนุฑ ุงูุญุงูู
            indicators['current_price'] = close_prices[-1]
            
            market_logger.info(f"ุชู ุญุณุงุจ ุงููุคุดุฑุงุช ุงูุชูููุฉ: {list(indicators.keys())}")
            return indicators
            
        except Exception as e:
            market_logger.error(f"ุฎุทุฃ ูู ุญุณุงุจ ุงููุคุดุฑุงุช ุงูุชูููุฉ: {e}")
            return {}
    
    def get_market_sentiment(self, symbol: str) -> str:
        """ุชุญููู ุงููุดุงุนุฑ ุงูุณูููุฉ"""
        try:
            # ุงูุญุตูู ุนูู ุงูุฃุฎุจุงุฑ ูู Yahoo Finance
            yf_symbol = self.symbol_mapping.get(symbol, symbol)
            ticker = yf.Ticker(yf_symbol)
            
            # ูุญุงููุฉ ุงูุญุตูู ุนูู ุงูุฃุฎุจุงุฑ
            try:
                news = ticker.news
                if news and len(news) > 0:
                    # ุชุญููู ุงูุนูุงููู ุงูุฃุฎูุฑุฉ
                    recent_headlines = []
                    for item in news[:3]:  # ุฃุฎุฐ ุฃูู 3 ุฃุฎุจุงุฑ ููุท
                        if isinstance(item, dict) and 'title' in item:
                            recent_headlines.append(item['title'])
                    
                    if recent_headlines:
                        headlines_text = ' '.join(recent_headlines)
                        return f"ุชุญููู ุงูุฃุฎุจุงุฑ: {headlines_text[:150]}..."
            except:
                pass  # ูู ุญุงูุฉ ูุดู ุงูุญุตูู ุนูู ุงูุฃุฎุจุงุฑ
            
            # ุฅุฐุง ูู ุชุชููุฑ ุฃุฎุจุงุฑุ ูุนุชูุฏ ุนูู ุชุญููู ุงูุฃุณุนุงุฑ
            return "ูุญุงูุฏ - ุชุญููู ุงุชุฌุงู ุงูุณุนุฑ"
            
        except Exception as e:
            market_logger.error(f"ุฎุทุฃ ูู ุชุญููู ุงููุดุงุนุฑ ูู {symbol}: {e}")
            return "ูุญุงูุฏ - ุชุญููู ุชููู ููุท"
    
    def analyze_with_gpt(self, symbol: str, book_content: str) -> Dict[str, Any]:
        """ุชุญููู ุงูุณูู ุจุงุณุชุฎุฏุงู GPT ูุน ุงูุจูุงูุงุช ุงูุญููููุฉ"""
        try:
            # ุงูุญุตูู ุนูู ุงูุจูุงูุงุช ุงูุญููููุฉ
            market_data = self.get_market_data(symbol, period="5d", interval="1h")
            
            if market_data.empty:
                return {
                    "action": "ุงูุชุธุงุฑ",
                    "confidence": 0,
                    "tp": 0,
                    "sl": 0,
                    "reason": "ูุง ุชูุฌุฏ ุจูุงูุงุช ุณูู ูุงููุฉ"
                }
            
            # ุญุณุงุจ ุงููุคุดุฑุงุช ุงูุชูููุฉ
            indicators = self.calculate_technical_indicators(market_data)
            
            # ุงูุญุตูู ุนูู ุชุญููู ุงููุดุงุนุฑ
            market_sentiment = self.get_market_sentiment(symbol)
            
            # ุชุญุถูุฑ ุงูุจูุงูุงุช ููุชุญููู
            recent_prices = market_data['Close'].tail(24).tolist()  # ุขุฎุฑ 24 ุณุงุนุฉ
            price_change = ((recent_prices[-1] - recent_prices[0]) / recent_prices[0] * 100) if len(recent_prices) > 1 else 0
            
            # ุฅูุดุงุก prompt ูุชูุฏู ููุชุญููู
            prompt = f"""
            ุฃูุช ุฎุจูุฑ ุชุฏุงูู ูุญุชุฑู. ุญููู ุงูุฒูุฌ {symbol} ุจุงุณุชุฎุฏุงู ุงูุจูุงูุงุช ุงูุญููููุฉ ุงูุชุงููุฉ:

            ๐ ุจูุงูุงุช ุงูุณูู:
            - ุงูุณุนุฑ ุงูุญุงูู: {indicators.get('current_price', 0):.4f}
            - ุงูุชุบููุฑ ุฎูุงู 24 ุณุงุนุฉ: {price_change:.2f}%
            
            ๐ ุงููุคุดุฑุงุช ุงูุชูููุฉ:
            - RSI: {indicators.get('rsi', 50):.2f}
            - MACD: {indicators.get('macd', 0):.4f}
            - ุฅุดุงุฑุฉ MACD: {indicators.get('macd_signal', 0):.4f}
            - Stochastic K: {indicators.get('stoch_k', 50):.2f}
            - Stochastic D: {indicators.get('stoch_d', 50):.2f}
            - ATR: {indicators.get('atr', 0):.4f}
            - ุงููุชูุณุท ุงููุชุญุฑู ุงูุจุณูุท (20): {indicators.get('sma_20', 0):.4f}
            - ุจููููุฌุฑ ุงูุนููู: {indicators.get('bb_upper', 0):.4f}
            - ุจููููุฌุฑ ุงูุณููู: {indicators.get('bb_lower', 0):.4f}
            
            ๐๏ธ ุชุญููู ุงูุฃุฎุจุงุฑ:
            {market_sentiment}
            
            ๐ ุงููุฑุฌุน ุงููุธุฑู:
            {book_content[:1000]}
            
            ุจูุงุกู ุนูู ูุฐุง ุงูุชุญููู ุงูุดุงููุ ุญุฏุฏ:
            1. ุงูุฅุฌุฑุงุก ุงูุฃูุณุจ (ุดุฑุงุก/ุจูุน/ุงูุชุธุงุฑ)
            2. ูุณุจุฉ ุงูุซูุฉ (0-100%)
            3. ูุณุชูู ุฌูู ุงูุฃุฑุจุงุญ ุงูููุงุณุจ
            4. ูุณุชูู ููู ุงูุฎุณุงุฑุฉ
            5. ุณุจุจ ุงููุฑุงุฑ
            
            ุฃุนุฏ ุงูุฅุฌุงุจุฉ ุจุตูุบุฉ JSON ุตุญูุญุฉ:
            {{
                "action": "ุดุฑุงุก ุฃู ุจูุน ุฃู ุงูุชุธุงุฑ",
                "confidence": ุฑูู ูู 0 ุฅูู 100,
                "tp": ูุณุชูู ุฌูู ุงูุฃุฑุจุงุญ,
                "sl": ูุณุชูู ููู ุงูุฎุณุงุฑุฉ,
                "reason": "ุณุจุจ ุงูุชูุตูุฉ ุจูุงุกู ุนูู ุงูุชุญููู"
            }}
            """
            
            response = self.openai_client.chat.completions.create(
                model="gpt-4o",  # ุงุณุชุฎุฏุงู ุงููููุฐุฌ ุงูุฃุญุฏุซ
                messages=[
                    {
                        "role": "system", 
                        "content": "ุฃูุช ุฎุจูุฑ ุชุฏุงูู ูุญุชุฑู ูุชุฎุตุต ูู ุชุญููู ุงูุฃุณูุงู ุงููุงููุฉ. ูุฏู ุชุญูููุงู ุฏูููุงู ููุณุคููุงู."
                    },
                    {"role": "user", "content": prompt}
                ],
                response_format={"type": "json_object"},
                temperature=0.3
            )
            
            # ุงุณุชุฎุฏุงู json.loads ุจุฏูุงู ูู eval ููุฃูุงู
            result = json.loads(response.choices[0].message.content)
            
            # ุงูุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช
            if 'action' not in result:
                result['action'] = 'ุงูุชุธุงุฑ'
            if 'confidence' not in result:
                result['confidence'] = 0
            if 'tp' not in result:
                result['tp'] = 0
            if 'sl' not in result:
                result['sl'] = 0
            if 'reason' not in result:
                result['reason'] = 'ุชุญููู ุนุงู'
            
            # ุฅุถุงูุฉ ุจูุงูุงุช ุฅุถุงููุฉ ููุชุญููู
            result['current_price'] = indicators.get('current_price', 0)
            result['rsi'] = indicators.get('rsi', 50)
            result['price_change_24h'] = price_change
            
            market_logger.info(f"ุชู ุชุญููู {symbol} ุจูุฌุงุญ: {result['action']} ({result['confidence']}%)")
            return result
            
        except Exception as e:
            market_logger.error(f"ุฎุทุฃ ูู ุชุญููู GPT ูู {symbol}: {e}")
            return {
                "action": "ุงูุชุธุงุฑ",
                "confidence": 0,
                "tp": 0,
                "sl": 0,
                "reason": f"ุฎุทุฃ ูู ุงูุชุญููู: {str(e)}"
            }

market_analyzer = MarketAnalyzer()
